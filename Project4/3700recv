#!/usr/bin/python3
#
# CS3700, Fall 2021
# TCP Project Starter Code

import datetime
import json
import sys
import socket

from base64 import b64decode

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 3700recv: " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30

data_read = 0
packets_recieved = []

# Bind to localhost and a port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# get port that was bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))
# listen for packets
while True:
  result = sock.recvfrom(MSG_SIZE)
  log("success recv")

  if result:
    (data, addr) = result
    data = data.decode()
    try:
      decoded = json.loads(data)
      # log("decoded["sequence"] " + str(decoded["sequence"]))
      # log("length of decoded["data"] " + str(len(decoded["data"])))
      # log("decoded["ack"] " + str(decoded["ack"]))
      # log("decoded["eof"] " + str(decoded["eof"]))
      # If the "eof" flag is set, exit
      # log("decoded in recv 56 " + str(decoded))
      if (decoded["eof"] and decoded["sequence"] == data_read):
        # Send back an ACK to the sender.
        msg = json.dumps({"ack": decoded["sequence"], "sack": decoded["sequence"]})
        log("ABOUT TO SEND EOF " + msg)
        if len(msg) > sock.sendto(msg.encode(), addr):
          log("[error] unable to fully send packet")
        log("[complete] 68")
        sys.exit(0)
    
      # If there is data, we accept it and print it out
      if (decoded["data"]):
        seq_num = decoded["sequence"]

        # if we receive some data, we assume it's in-order
        # ** You will need to do much more here ** 
        cur_seq_nums = list()
        for packet in packets_recieved:
          cur_seq_nums.append(packet["sequence"])
        
        # log("cur_seq_nums " + str(cur_seq_nums))
        if seq_num >= data_read and not seq_num in cur_seq_nums:
          if seq_num == data_read:
            log(f"[recv data] {seq_num} ({len(decoded['data'])}) ACCEPTED (in-order)")
          else:
            log(f"[recv data] {seq_num} ({len(decoded['data'])}) ACCEPTED (out-of-order)")
          packets_recieved.append(decoded)
        else:
          log("IGNORED")
        # log("[recv data] " + str(decoded['sequence']) + " (" + str(len(data)) + ") ACCEPTED (in-order)")
        # sys.stdout.buffer.write(b64decode(decoded['data'].encode()))

      sorted_packets = sorted(packets_recieved, key=lambda packet: packet["sequence"])
      for packet in sorted_packets:
        if packet["sequence"] == data_read:
          decoded_data = b64decode(packet["data"].encode())
          sys.stdout.buffer.write(decoded_data)
          data_read = packet["sequence"] + len(decoded_data)
      packets_recieved = list()
      for packet in sorted_packets:
        if (packet["sequence"] > data_read):
          packets_recieved.append(packet)
      

      # Send back an acknowledment package to the sender
      msg = json.dumps({"ack": data_read, "sack": decoded["sequence"]})
      log("ABOUT TO SEND AN ACK MSG" + msg)
      sent = sock.sendto(msg.encode(), addr)
      log("[sent] " + str(sent))
      if len(msg) > sent:
        log("[error] unable to fully send packet")

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)
